version: "1.0"
kind: step-type
metadata:
  name: atqipiranga/sam-deploy
  title: SAM AWS
  version: 1.0.2
  isPublic: true
  description: SAM AWS
  sources:
    - >-
      https://github.com/Thiagosnts/step-sam
  stage: incubating
  maintainers:
    - name: Thiago Mourao
      email: thiagosnts90@gmail.com
  categories:
    - featured
    - aws
  official: false
  tags: []
  icon:
    type: svg
    url: >-
      https://raw.githubusercontent.com/Thiagosnts/step-sam/master/icon-2.svg
    background: "#D9E6F8"
  examples:
    - description: example-1
      workflow:
        SamDeploy:
          title: Deploy SAM AWS
          type: sam-deploy
          arguments:
            AWS_ACCESS_KEY_ID: IDEXAMPLE
            AWS_SECRET_ACCESS_KEY: KEYEXAMPLE
            AWS_SESSION_TOKEN: TOKENEXAMPLE
            STACK: stack-exampÄºe
            TEMPLATE: /project
            PARAMETERS:
              - env1=value1
              - env2=value2
              - env3=value3
            PARAMETERS_JSON: parameters.json
            TAGS:
              - project=example
              - environment=hml
            REGION: us-east2
            S3_PREFIX: sam
            S3_BUCKET: sam-example
spec:
  arguments: |-
    {
      "definitions": {},
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "additionalProperties": false,
      "patterns": [],
      "required": [],
      "properties": {
          "AWS_ACCESS_KEY_ID": {
              "type": "string",
              "description": "AWS_ACCESS_KEY_ID"
          },
          "AWS_SECRET_ACCESS_KEY": {
              "type": "string",
              "description": "AWS_SECRET_ACCESS_KEY"
          },
          "AWS_SESSION_TOKEN": {
              "type": "string",
              "description": "AWS_SESSION_TOKEN"
          },
          "TEMPLATE": {
              "type": "string",
              "description": "path TEMPLATE"
          },
          "STACK": {
              "type": "string",
              "description": "STACK"
          },
          "REGION": {
              "type": "string",
              "description": "REGION"
          },
          "S3_PREFIX": {
              "type": "string",
              "description": "S3-PREFIX"
          },
          "S3_BUCKET": {
              "type": "string",
              "description": "S3-BUCKET"
          },
          "PARAMETERS": {
              "type": "array",
              "items": {
                  "type": "string"
              },
              "description": "List of the PARAMETERS to get"
          },
          "PARAMETERS_JSON": {
              "type": "string",
              "description": "Path json of the PARAMETERS to get ex: content file json[{'ParameterKey':'ApplicationName','ParameterValue':'Foo'},{'ParameterKey':'ApplicationKey','ParameterValue':'Bar'}]"
          },
          "TAGS": {
              "type": "array",
              "items": {
                  "type": "string"
              },
              "description": "List of the TAGS to get"
          }
        }
    }
  delimiters:
    left: "[["
    right: "]]"
  stepsTemplate: |-
    main:
        image: public.ecr.aws/sam/build-nodejs14.x
        commands:
        - 'export AWS_ACCESS_KEY_ID=[[ .Arguments.AWS_ACCESS_KEY_ID ]]'
        - 'export AWS_SECRET_ACCESS_KEY=[[ .Arguments.AWS_SECRET_ACCESS_KEY ]]'
        [[ if .Arguments.AWS_SESSION_TOKEN ]]
        - 'export AWS_SESSION_TOKEN=[[ .Arguments.AWS_SESSION_TOKEN ]]'
        [[ end ]]
        [[ if .Arguments.PARAMETERS_JSON ]]
        - SAM_PARAMETERS=$( cat [[ .Arguments.PARAMETERS_JSON ]] | jq -r '.[] | "\(.ParameterKey)=\(.ParameterValue)"' )
        - 'echo $SAM_PARAMETERS'
        [[ end ]]
        [[- $cmd := (printf "sam deploy --no-confirm-changeset --capabilities=CAPABILITY_IAM --no-fail-on-empty-changeset") -]]
        [[- $cmd = (printf "%s --stack-name=%s" $cmd .Arguments.STACK) -]]
        [[- $cmd = (printf "%s --region=%s" $cmd .Arguments.REGION) -]]
        [[- $cmd = (printf "%s --s3-prefix=%s" $cmd .Arguments.S3_PREFIX) -]]
        [[- $cmd = (printf "%s --s3-bucket=%s" $cmd .Arguments.S3_BUCKET) -]]
        [[- $cmd = (printf "%s --parameter-overrides" $cmd) -]]
        [[ range $arg := .Arguments.PARAMETERS ]]
        [[- $cmd = (printf "%s %s" $cmd $arg) -]]
        [[- end ]]
        [[- $cmd = (printf "%s --tags" $cmd) -]]
        [[ range $arg := .Arguments.TAGS ]]
        [[- $cmd = (printf "%s %s" $cmd $arg) -]]
        [[- end ]]
        - 'cd [[ .Arguments.TEMPLATE ]]'
        - '[[ $cmd ]]'

